openapi: 3.1.0
info:
  title: IAM Authorization API
  version: 1.0.0
  description: |
    IAM 授权模块 REST API 规范
    
    ## 功能概述
    
    - **角色管理**: 创建、更新、删除、查询角色
    - **角色分配**: 将角色授予用户或组，撤销角色
    - **策略管理**: 添加/移除 RBAC 策略规则
    - **资源管理**: 管理受保护的资源和动作
    
    ## 授权模型
    
    采用 **RBAC (Role-Based Access Control)** 模型:
    
    ```
    Subject (用户/组) --[Assignment]--> Role --[Policy]--> Resource + Action
    ```
    
    ## 基础路径
    
    所有授权 API 的基础路径为 `/api/v1/authz`

servers:
  - url: https://iam.yangshujie.com/api/v1/authz
    description: 生产环境
  - url: http://localhost:8080/api/v1/authz
    description: 本地开发

tags:
  - name: Health
    description: 健康检查
  - name: Roles
    description: 角色管理
  - name: Assignments
    description: 角色分配管理
  - name: Policies
    description: 策略规则管理
  - name: Resources
    description: 资源管理

paths:
  # ============ 健康检查 ============
  /health:
    get:
      tags: [Health]
      summary: 授权模块健康检查
      operationId: GetAuthzHealth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  module: { type: string, example: authz }

  # ============ 角色管理 ============
  /roles:
    post:
      tags: [Roles]
      summary: 创建角色
      operationId: CreateRole
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateRoleRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RoleResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }

    get:
      tags: [Roles]
      summary: 列出角色
      operationId: ListRoles
      parameters:
        - { $ref: '#/components/parameters/Offset' }
        - { $ref: '#/components/parameters/Limit' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/RoleResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /roles/{id}:
    get:
      tags: [Roles]
      summary: 获取角色详情
      operationId: GetRole
      parameters:
        - { $ref: '#/components/parameters/RoleID' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RoleResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

    put:
      tags: [Roles]
      summary: 更新角色
      operationId: UpdateRole
      parameters:
        - { $ref: '#/components/parameters/RoleID' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateRoleRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RoleResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

    delete:
      tags: [Roles]
      summary: 删除角色
      operationId: DeleteRole
      parameters:
        - { $ref: '#/components/parameters/RoleID' }
      responses:
        '204':
          description: No Content
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409':
          description: Conflict - 角色仍有分配记录
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /roles/{id}/assignments:
    get:
      tags: [Roles]
      summary: 列出角色的分配记录
      operationId: ListAssignmentsByRole
      parameters:
        - { $ref: '#/components/parameters/RoleID' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AssignmentResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /roles/{id}/policies:
    get:
      tags: [Roles]
      summary: 获取角色的策略列表
      operationId: GetPoliciesByRole
      parameters:
        - { $ref: '#/components/parameters/RoleID' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PolicyRuleResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  # ============ 角色分配 ============
  /assignments/grant:
    post:
      tags: [Assignments]
      summary: 授予角色
      description: 将角色授予用户或组
      operationId: GrantRole
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GrantRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AssignmentResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404':
          description: Not Found - 角色不存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '409':
          description: Conflict - 已存在相同的分配
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /assignments/revoke:
    post:
      tags: [Assignments]
      summary: 撤销角色
      description: 撤销用户或组的角色
      operationId: RevokeRole
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RevokeRequest' }
      responses:
        '204':
          description: No Content
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404':
          description: Not Found - 分配记录不存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /assignments/{id}:
    delete:
      tags: [Assignments]
      summary: 根据 ID 撤销分配
      operationId: RevokeRoleByID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
          description: 分配记录 ID
      responses:
        '204':
          description: No Content
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /assignments/subject:
    get:
      tags: [Assignments]
      summary: 列出主体的分配
      description: 查询用户或组的所有角色分配
      operationId: ListAssignmentsBySubject
      parameters:
        - name: subject_type
          in: query
          required: true
          schema:
            type: string
            enum: [user, group]
          description: 主体类型
        - name: subject_id
          in: query
          required: true
          schema: { type: string }
          description: 主体 ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AssignmentResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # ============ 策略管理 ============
  /policies:
    post:
      tags: [Policies]
      summary: 添加策略规则
      description: |
        为角色添加策略规则 (Role -> Resource + Action)
        
        策略规则格式: `role:{roleId}, {domain}, resource:{resourceId}, {action}`
      operationId: AddPolicyRule
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AddPolicyRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PolicyRuleResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404':
          description: Not Found - 角色或资源不存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '409':
          description: Conflict - 策略规则已存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

    delete:
      tags: [Policies]
      summary: 移除策略规则
      description: 从角色中移除策略规则
      operationId: RemovePolicyRule
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RemovePolicyRequest' }
      responses:
        '204':
          description: No Content
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404':
          description: Not Found - 策略规则不存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /policies/version:
    get:
      tags: [Policies]
      summary: 获取当前策略版本
      description: 获取租户的当前策略版本信息（用于缓存失效）
      operationId: GetCurrentVersion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PolicyVersionResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # ============ 资源管理 ============
  /resources:
    post:
      tags: [Resources]
      summary: 创建资源
      operationId: CreateResource
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateResourceRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResourceResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409':
          description: Conflict - 资源键已存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

    get:
      tags: [Resources]
      summary: 列出资源
      operationId: ListResources
      parameters:
        - { $ref: '#/components/parameters/Offset' }
        - { $ref: '#/components/parameters/Limit' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ResourceResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /resources/{id}:
    get:
      tags: [Resources]
      summary: 获取资源详情
      operationId: GetResource
      parameters:
        - { $ref: '#/components/parameters/ResourceID' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResourceResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

    put:
      tags: [Resources]
      summary: 更新资源
      operationId: UpdateResource
      parameters:
        - { $ref: '#/components/parameters/ResourceID' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateResourceRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResourceResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

    delete:
      tags: [Resources]
      summary: 删除资源
      operationId: DeleteResource
      parameters:
        - { $ref: '#/components/parameters/ResourceID' }
      responses:
        '204':
          description: No Content
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409':
          description: Conflict - 资源仍在策略中使用
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /resources/key/{key}:
    get:
      tags: [Resources]
      summary: 根据键获取资源
      operationId: GetResourceByKey
      parameters:
        - name: key
          in: path
          required: true
          schema: { type: string }
          description: 资源键（唯一标识）
          example: user.profile.read
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResourceResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /resources/validate-action:
    post:
      tags: [Resources]
      summary: 验证资源动作
      description: 验证给定的动作是否在资源的允许动作列表中
      operationId: ValidateAction
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ValidateActionRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidateActionResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404':
          description: Not Found - 资源不存在
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

# ============ Components ============
components:
  parameters:
    RoleID:
      name: id
      in: path
      required: true
      schema: { type: integer, format: int64 }
      description: 角色 ID

    ResourceID:
      name: id
      in: path
      required: true
      schema: { type: integer, format: int64 }
      description: 资源 ID

    Offset:
      name: offset
      in: query
      schema: { type: integer, default: 0, minimum: 0 }
      description: 偏移量

    Limit:
      name: limit
      in: query
      schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
      description: 每页数量

  schemas:
    # ============ 角色 Schemas ============
    CreateRoleRequest:
      type: object
      required: [name, display_name]
      properties:
        name:
          type: string
          description: 角色名称（唯一标识，建议使用下划线命名）
          example: super_admin
        display_name:
          type: string
          description: 显示名称
          example: 超级管理员
        description:
          type: string
          description: 角色描述
          example: 拥有系统所有权限的超级管理员

    UpdateRoleRequest:
      type: object
      properties:
        display_name:
          type: string
          description: 显示名称
        description:
          type: string
          description: 角色描述

    RoleResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: super_admin
        display_name:
          type: string
          example: 超级管理员
        tenant_id:
          type: string
          example: default
        description:
          type: string
          example: 拥有系统所有权限的超级管理员

    # ============ 角色分配 Schemas ============
    GrantRequest:
      type: object
      required: [subject_type, subject_id, role_id, granted_by]
      properties:
        subject_type:
          type: string
          enum: [user, group]
          description: 主体类型
          example: user
        subject_id:
          type: string
          description: 主体 ID（用户 ID 或组 ID）
          example: "10001"
        role_id:
          type: integer
          format: int64
          description: 角色 ID
          example: 1
        granted_by:
          type: string
          description: 授权人 ID
          example: "10000"

    RevokeRequest:
      type: object
      required: [subject_type, subject_id, role_id]
      properties:
        subject_type:
          type: string
          enum: [user, group]
          description: 主体类型
          example: user
        subject_id:
          type: string
          description: 主体 ID
          example: "10001"
        role_id:
          type: integer
          format: int64
          description: 角色 ID
          example: 1

    AssignmentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        subject_type:
          type: string
          enum: [user, group]
          example: user
        subject_id:
          type: string
          example: "10001"
        role_id:
          type: integer
          format: int64
          example: 1
        tenant_id:
          type: string
          example: default
        granted_by:
          type: string
          example: "10000"

    # ============ 策略 Schemas ============
    AddPolicyRequest:
      type: object
      required: [role_id, resource_id, action, changed_by]
      properties:
        role_id:
          type: integer
          format: int64
          description: 角色 ID
          example: 1
        resource_id:
          type: integer
          format: int64
          description: 资源 ID
          example: 1
        action:
          type: string
          description: 动作
          example: read
        changed_by:
          type: string
          description: 操作人 ID
          example: "10000"
        reason:
          type: string
          description: 变更原因
          example: 授予用户管理权限

    RemovePolicyRequest:
      type: object
      required: [role_id, resource_id, action, changed_by]
      properties:
        role_id:
          type: integer
          format: int64
          description: 角色 ID
          example: 1
        resource_id:
          type: integer
          format: int64
          description: 资源 ID
          example: 1
        action:
          type: string
          description: 动作
          example: read
        changed_by:
          type: string
          description: 操作人 ID
          example: "10000"
        reason:
          type: string
          description: 变更原因
          example: 撤销权限

    PolicyRuleResponse:
      type: object
      properties:
        subject:
          type: string
          description: 主体（角色标识）
          example: role:1
        domain:
          type: string
          description: 域
          example: user_center
        object:
          type: string
          description: 对象（资源标识）
          example: resource:1
        action:
          type: string
          description: 动作
          example: read

    PolicyVersionResponse:
      type: object
      properties:
        tenant_id:
          type: string
          example: default
        version:
          type: integer
          format: int64
          description: 策略版本号（时间戳）
          example: 1698765432
        changed_by:
          type: string
          example: "10000"
        reason:
          type: string
          example: 添加新策略规则

    # ============ 资源 Schemas ============
    CreateResourceRequest:
      type: object
      required: [key, display_name, app_name, domain, type, actions]
      properties:
        key:
          type: string
          description: 资源键（唯一标识，建议使用点分命名）
          example: user.profile.read
        display_name:
          type: string
          description: 显示名称
          example: 用户资料读取
        app_name:
          type: string
          description: 所属应用
          example: user_center
        domain:
          type: string
          description: 所属域
          example: user_center
        type:
          type: string
          description: 资源类型
          example: api
        actions:
          type: array
          items: { type: string }
          description: 允许的动作列表
          example: [read, write, delete]
        description:
          type: string
          description: 资源描述
          example: 用户资料的读取权限

    UpdateResourceRequest:
      type: object
      properties:
        display_name:
          type: string
          description: 显示名称
        actions:
          type: array
          items: { type: string }
          description: 允许的动作列表
          minItems: 1
        description:
          type: string
          description: 资源描述

    ResourceResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        key:
          type: string
          example: user.profile.read
        display_name:
          type: string
          example: 用户资料读取
        app_name:
          type: string
          example: user_center
        domain:
          type: string
          example: user_center
        type:
          type: string
          example: api
        actions:
          type: array
          items: { type: string }
          example: [read, write, delete]
        description:
          type: string
          example: 用户资料的读取权限

    ValidateActionRequest:
      type: object
      required: [resource_key, action]
      properties:
        resource_key:
          type: string
          description: 资源键
          example: user.profile.read
        action:
          type: string
          description: 待验证的动作
          example: read

    ValidateActionResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: 是否有效
          example: true

    # ============ 通用 Schemas ============
    Error:
      type: object
      properties:
        code:
          type: integer
          description: 业务错误码
        message:
          type: string
          description: 错误消息

  responses:
    BadRequest:
      description: Bad Request - 请求参数错误
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    Unauthorized:
      description: Unauthorized - 未授权
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    Forbidden:
      description: Forbidden - 无权限
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    NotFound:
      description: Not Found - 资源不存在
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

    Conflict:
      description: Conflict - 资源冲突
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

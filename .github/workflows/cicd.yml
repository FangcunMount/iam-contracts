name: CI/CD Pipeline

# ÂøÖÈúÄÁöÑ Secrets ÈÖçÁΩÆ (Âú® GitHub ‰ªìÂ∫ìËÆæÁΩÆ‰∏≠ÈÖçÁΩÆ)
# Settings ‚Üí Secrets and variables ‚Üí Actions
#
# Organization Á∫ßÂà´ Secrets:
#   - SVRA_HOST, SVRA_USERNAME, SVRA_SSH_KEY, SVRA_SSH_PORT
#   - MYSQL_HOST, MYSQL_PORT, REDIS_HOST, REDIS_PORT
#   - SVRA_SUDO_PASSWORD       # ÂèØÈÄâÔºõÂ¶ÇÊûúËøúÁ´ØÊú™ÈÖçÁΩÆ NOPASSWD ÂàôÂøÖÂ°´ÔºàÈÉ®ÁΩ≤Áî®Êà∑ÁöÑ sudo ÂØÜÁ†ÅÔºâ
#
# Repository Á∫ßÂà´ Secrets:
#   - MYSQL_USERNAME, MYSQL_PASSWORD, MYSQL_DBNAME
#   - REDIS_PASSWORD, REDIS_DB
#   - DOCKERHUB_USERNAME, DOCKERHUB_TOKEN (ÂèØÈÄâÔºåÁî®‰∫éÊé®ÈÄÅÈïúÂÉèÂà∞ Docker Hub Â§á‰ªΩ)
#   - JWT_SECRET
#
# ËØ¥ÊòéÔºö
# - Â¶ÇÊûúÊúçÂä°Âô®Â∑≤‰∏∫ÈÉ®ÁΩ≤Áî®Êà∑ÈÖçÁΩÆ‰∫ÜÂÖçÂØÜ sudoÔºàNOPASSWDÔºâÔºåÂèØ‰∏çËÆæÁΩÆ SVRA_SUDO_PASSWORD„ÄÇ
# - validate-secrets job ‰∏ç‰ºöÂº∫Âà∂Ê†°È™å SVRA_SUDO_PASSWORDÔºåÊòØÂê¶ÂøÖÂ°´ÂèñÂÜ≥‰∫éÊúçÂä°Âô® sudo Á≠ñÁï•„ÄÇ

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: fangcunmount/iam-contracts  # ÂøÖÈ°ªÂ∞èÂÜôÔºåDocker ‰∏çÊîØÊåÅÂ§ßÂÜôÂ≠óÊØç

jobs:
  validate-secrets:
    name: Validate Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Check Required Secrets
        env:
          SVRA_HOST: ${{ secrets.SVRA_HOST }}
          SVRA_USERNAME: ${{ secrets.SVRA_USERNAME }}
          SVRA_SSH_KEY: ${{ secrets.SVRA_SSH_KEY }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DBNAME: ${{ secrets.MYSQL_DBNAME }}
        run: |
          echo "üîç Validating required secrets..."
          VALIDATION_FAILED=0
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "üìã Checking deployment secrets for main branch..."
            if [ -z "$SVRA_HOST" ]; then echo "‚ùå SVRA_HOST is not set"; VALIDATION_FAILED=1; else echo "‚úÖ SVRA_HOST is set"; fi
            if [ -z "$SVRA_USERNAME" ]; then echo "‚ùå SVRA_USERNAME is not set"; VALIDATION_FAILED=1; else echo "‚úÖ SVRA_USERNAME is set"; fi
            if [ -z "$SVRA_SSH_KEY" ]; then echo "‚ùå SVRA_SSH_KEY is not set"; VALIDATION_FAILED=1; else echo "‚úÖ SVRA_SSH_KEY is set"; fi
            if [ -z "$MYSQL_HOST" ]; then echo "‚ùå MYSQL_HOST is not set"; VALIDATION_FAILED=1; else echo "‚úÖ MYSQL_HOST is set"; fi
            if [ -z "$MYSQL_USERNAME" ]; then echo "‚ùå MYSQL_USERNAME is not set"; VALIDATION_FAILED=1; else echo "‚úÖ MYSQL_USERNAME is set"; fi
            if [ -z "$MYSQL_PASSWORD" ]; then echo "‚ùå MYSQL_PASSWORD is not set"; VALIDATION_FAILED=1; else echo "‚úÖ MYSQL_PASSWORD is set"; fi
            if [ -z "$MYSQL_DBNAME" ]; then echo "‚ùå MYSQL_DBNAME is not set"; VALIDATION_FAILED=1; else echo "‚úÖ MYSQL_DBNAME is set"; fi
            echo "‚ÑπÔ∏è Â¶ÇÊûúËøúÁ´ØÊú™ÈÖçÁΩÆ NOPASSWDÔºåËØ∑Âú® Secrets ‰∏≠ËÆæÁΩÆ SVRA_SUDO_PASSWORD„ÄÇ"
          else
            echo "‚ÑπÔ∏è Skipping deployment secrets check (not on main branch)"
          fi
          echo ""
          if [ $VALIDATION_FAILED -eq 1 ]; then
            echo "‚ö†Ô∏è Secrets validation failed! Please configure missing secrets."
            echo "‚ÑπÔ∏è Continuing anyway for non-deployment jobs..."
          else
            echo "‚úÖ All required secrets are configured!"
          fi

  test:
    name: Run Tests
    needs: [validate-secrets]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Get dependencies
        run: |
          go mod download
          go mod verify
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.6
          args: --timeout=5m

  build:
    name: Build Application
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Build
        run: |
          make build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: iam-apiserver
          path: bin/apiserver
          retention-days: 7

  docker:
    name: Build Docker Image
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        run: |
          make docker-build
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: fangcunmount
          DOCKER_TAG: latest
      - name: Push to GitHub Container Registry
        run: |
          make docker-push
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: fangcunmount
      - name: Tag and Push to Docker Hub
        run: |
          docker tag ghcr.io/fangcunmount/iam-contracts:latest ${{ secrets.DOCKERHUB_USERNAME }}/iam-contracts:latest
          docker tag ghcr.io/fangcunmount/iam-contracts:latest ${{ secrets.DOCKERHUB_USERNAME }}/iam-contracts:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/iam-contracts:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/iam-contracts:${{ github.sha }}
          echo "‚úÖ ÈïúÂÉèÂ∑≤Êé®ÈÄÅÂà∞ Docker Hub:"
          echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/iam-contracts:latest"
          echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/iam-contracts:${{ github.sha }}"

  deploy:
    name: Deploy to Production
    needs: [build, docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://iam.yangshujie.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: iam-apiserver
          path: ./artifacts

      - name: Prepare deployment files
        run: |
          # artifact Êñá‰ª∂ÂêçÊòØ apiserverÔºåÈúÄË¶ÅÈáçÂëΩÂêç‰∏∫ iam-apiserver
          mv ./artifacts/apiserver ./artifacts/iam-apiserver
          chmod +x ./artifacts/iam-apiserver
          mkdir -p deploy-package
          cp ./artifacts/iam-apiserver deploy-package/
          cp -r configs deploy-package/
          tar -czf deploy-package.tar.gz -C deploy-package .

      - name: Upload deployment package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SVRA_HOST }}
          username: ${{ secrets.SVRA_USERNAME }}
          key: ${{ secrets.SVRA_SSH_KEY }}
          port: ${{ secrets.SVRA_SSH_PORT || 22 }}
          source: "deploy-package.tar.gz"
          target: "/tmp"

      # ---- Á¨¨‰∏Ä‰∏™ SSH Ê≠•ÔºöÈÉ®ÁΩ≤Âà∞ÊúçÂä°Âô®ÔºàÂ∑≤Êîπ‰∏∫ÊØèÊù° sudo ÈÉΩ‰º†ÂØÜÁ†ÅÔºâ----
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        env:
          # ÈÄè‰º†Âà∞ËøúÁ´Ø‰ΩøÁî®
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT || 3306 }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DBNAME: ${{ secrets.MYSQL_DBNAME }}

          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT || 6379 }}
          REDIS_DB: ${{ secrets.REDIS_DB || 1 }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SUDO_PASSWORD: ${{ secrets.SVRA_SUDO_PASSWORD }}
        with:
          host: ${{ secrets.SVRA_HOST }}
          username: ${{ secrets.SVRA_USERNAME }}
          key: ${{ secrets.SVRA_SSH_KEY }}
          port: ${{ secrets.SVRA_SSH_PORT || 22 }}
          # Ëøô‰∫õÂèòÈáè‰ºöË¢´Ê≥®ÂÖ•Âà∞ËøúÁ´Ø session ÁöÑÁéØÂ¢É‰∏≠
          envs: DOCKER_REGISTRY,IMAGE_NAME,GHCR_USERNAME,GHCR_TOKEN,MYSQL_HOST,MYSQL_PORT,MYSQL_USERNAME,MYSQL_PASSWORD,MYSQL_DBNAME,REDIS_HOST,REDIS_PORT,REDIS_DB,REDIS_PASSWORD,JWT_SECRET,SUDO_PASSWORD
          script: |
            set -Eeuo pipefail

            # ----- SUDO Âä©Êâã v2ÔºöÂÖçÂØÜ‰ºòÂÖàÔºõËã•ÈúÄÂØÜÁ†ÅÂàôÊØèÊ¨° sudo ÈÉΩÂñÇÂØÜÁ†Å -----
            if sudo -n true 2>/dev/null; then
              SUDO="sudo"
              echo "‚ÑπÔ∏è Using passwordless sudo (NOPASSWD)."
            else
              if [ -z "${SUDO_PASSWORD:-}" ]; then
                echo "‚ùå sudo needs password. Provide SVRA_SUDO_PASSWORD or configure NOPASSWD." >&2
                exit 1
              fi
              sudo_pw() { sudo -S "$@" <<<"$SUDO_PASSWORD"; }
              export -f sudo_pw
              SUDO="sudo_pw"
              $SUDO -v || true
              echo "‚ÑπÔ∏è Using sudo with password via STDIN for every command."
            fi

            echo "=========================================="
            echo "Starting deployment to Production Server (SVRA)"
            echo "=========================================="

            # Create directory structure
            $SUDO mkdir -p /opt/iam/configs
            $SUDO mkdir -p /opt/iam/configs/env
            $SUDO mkdir -p /var/log/iam-contracts

            # Backup current version
            echo "Creating backup..."
            BACKUP_DIR="/opt/backups/iam/deployments"
            $SUDO mkdir -p "$BACKUP_DIR"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            if [ -d "/opt/iam/configs" ] && [ "$(ls -A /opt/iam/configs 2>/dev/null)" != "" ]; then
              $SUDO tar -czf "$BACKUP_DIR/backup_${TIMESTAMP}.tar.gz" \
                /opt/iam/configs /var/log/iam-contracts \
                2>/dev/null || echo "No previous version to backup"
            else
              echo "No previous version to backup"
            fi

            # Extract new version
            echo "Extracting new deployment package..."
            DEPLOY_TMP="/tmp/iam-deploy-$$"
            mkdir -p "$DEPLOY_TMP"
            cd "$DEPLOY_TMP"
            tar -xzf /tmp/deploy-package.tar.gz
            $SUDO cp -r configs/* /opt/iam/configs/
            $SUDO chown -R 1000:1000 /opt/iam/configs

            LOG_DIR_HOST="/data/logs/iam"
            $SUDO mkdir -p "$LOG_DIR_HOST"
            $SUDO chown -R 1000:1000 "$LOG_DIR_HOST"

            # ÂÜôÂÖ•ÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂Ôºà‰ΩøÁî® envs ÈÄè‰º†ÂÄºÔºõÊ≠§Â§ÑÂú®ËøúÁ´ØÂ±ïÂºÄÔºâ
            echo "Creating environment configuration..."
            $SUDO bash -c "cat > /opt/iam/configs/env/config.prod.env <<EOF
            # Auto-generated production environment configuration
            IAM_APISERVER_MYSQL_HOST=\${MYSQL_HOST}:\${MYSQL_PORT:-3306}
            IAM_APISERVER_MYSQL_USERNAME=\${MYSQL_USERNAME}
            IAM_APISERVER_MYSQL_PASSWORD=\${MYSQL_PASSWORD}
            IAM_APISERVER_MYSQL_DATABASE=\${MYSQL_DBNAME}
            IAM_APISERVER_REDIS_HOST=\${REDIS_HOST}
            IAM_APISERVER_REDIS_PORT=\${REDIS_PORT:-6379}
            IAM_APISERVER_REDIS_ADDR=\${REDIS_HOST}:\${REDIS_PORT:-6379}
            IAM_APISERVER_REDIS_PASSWORD=\${REDIS_PASSWORD}
            IAM_APISERVER_REDIS_DB=\${REDIS_DB:-1}
            IAM_APISERVER_JWT_SECRET=\${JWT_SECRET}
            EOF"
            # ËÆ©ÂèòÈáèÁîüÊïàÔºàÊ≠§Â§Ñ heredoc Â∑≤Âú®ËøúÁ´ØÂ±ïÂºÄÔºõ‰øùÂÆàËµ∑ËßÅ‰ΩøÁî® envsubst ‰∏çÊòØÂøÖÈ°ªÔºâ
            $SUDO chmod 600 /opt/iam/configs/env/config.prod.env
            $SUDO chown 1000:1000 /opt/iam/configs/env/config.prod.env

            # Ê∏ÖÁêÜ‰∏¥Êó∂ÁõÆÂΩï‰∏é‰∏ä‰º†ÂåÖ
            cd /tmp
            rm -rf "$DEPLOY_TMP"
            rm -f /tmp/deploy-package.tar.gz

            # Á°Æ‰øù‰∏ìÁî® Docker ÁΩëÁªúÂ≠òÂú®
            if ! $SUDO docker network ls --format '{{.Name}}' | grep -w iam-network > /dev/null 2>&1; then
              echo "Creating Docker network iam-network..."
              $SUDO docker network create iam-network
            fi

            # Ëß£Êûê TLS Ë∑ØÂæÑÔºàÂ¶ÇÈÖçÁΩÆÔºâ
            CERT_DEST_PATH=$($SUDO sed -n 's/^[[:space:]]*cert-file:[[:space:]]*"\?\(.*\)"\?/\1/p' /opt/iam/configs/apiserver.yaml | head -n1)
            KEY_DEST_PATH=$($SUDO sed -n 's/^[[:space:]]*private-key-file:[[:space:]]*"\?\(.*\)"\?/\1/p' /opt/iam/configs/apiserver.yaml | head -n1)
            CERT_DEST_PATH=${CERT_DEST_PATH:-/etc/iam-contracts/ssl/iam.yangshujie.com.crt}
            KEY_DEST_PATH=${KEY_DEST_PATH:-/etc/iam-contracts/ssl/iam.yangshujie.com.key}
            CERT_HOST_PATH="/data/ssl/certs/$(basename "$CERT_DEST_PATH")"
            KEY_HOST_PATH="/data/ssl/private/$(basename "$KEY_DEST_PATH")"
            TLS_MOUNTS=""
            if [ -f "$CERT_HOST_PATH" ] && [ -f "$KEY_HOST_PATH" ]; then
              TLS_MOUNTS="-v $CERT_HOST_PATH:$CERT_DEST_PATH:ro -v $KEY_HOST_PATH:$KEY_DEST_PATH:ro"
            else
              echo "‚ö†Ô∏è TLS certificate or key not found under /data/ssl, HTTPS may fail"
            fi

            # GHCR ÁôªÂΩïÔºàÂ¶ÇÊúâ TokenÔºâ
            if [ -n "${GHCR_TOKEN:-}" ]; then
              echo "Logging into GitHub Container Registry..."
              echo "$GHCR_TOKEN" | $SUDO docker login "$DOCKER_REGISTRY" -u "$GHCR_USERNAME" --password-stdin >/dev/null || true
            fi

            # ÊãâÂèñÈïúÂÉè
            echo "Pulling latest Docker image..."
            if ! $SUDO docker pull "$DOCKER_REGISTRY/$IMAGE_NAME:latest"; then
              echo "‚ö†Ô∏è Pull with auth failed, trying anonymous..."
              $SUDO docker pull "$DOCKER_REGISTRY/$IMAGE_NAME:latest" || true
            fi

            # ÂÅúÊéâÊóßÂÆπÂô®
            if $SUDO docker ps -a --format '{{.Names}}' | grep -w iam-apiserver > /dev/null 2>&1; then
              echo "Stopping existing Docker container..."
              $SUDO docker stop iam-apiserver || true
              $SUDO docker rm iam-apiserver || true
            fi

            # ÁªÑÂêàËøêË°åÂèÇÊï∞
            DOCKER_OPTIONS="--name iam-apiserver \
              --restart unless-stopped \
              --network iam-network \
              -p 8080:9080 \
              -p 9444:9444 \
              -v /opt/iam/configs:/app/configs \
              -v $LOG_DIR_HOST:/var/log/iam-contracts \
              --env-file /opt/iam/configs/env/config.prod.env"
            if [ -n "$TLS_MOUNTS" ]; then
              DOCKER_OPTIONS="$DOCKER_OPTIONS $TLS_MOUNTS"
            fi

            # ÂêØÂä®
            echo "Starting IAM service with Docker..."
            $SUDO docker run -d $DOCKER_OPTIONS \
              "$DOCKER_REGISTRY/$IMAGE_NAME:latest" \
              --config=/app/configs/apiserver.yaml

            # ÂÅ•Â∫∑Ê£ÄÊü•
            echo "Waiting for service to be ready..."
            ATTEMPTS=0
            MAX_ATTEMPTS=30
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              if curl -sf http://localhost:8080/healthz > /dev/null 2>&1; then
                echo "‚úÖ API health check passed (attempt $ATTEMPTS)"
                $SUDO docker ps --filter "name=iam-apiserver" --format "table {{.Names}}\t{{.Status}}"
                break
              fi
              ATTEMPTS=$((ATTEMPTS + 1))
              if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                echo "‚è≥ Health check attempt $ATTEMPTS/$MAX_ATTEMPTS failed, retrying in 5 seconds..."
                sleep 5
              fi
            done

            # ÊúÄÁªàÈ™åËØÅ
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "‚ùå Service failed to start after $MAX_ATTEMPTS attempts"
              echo "Checking container status..."
              $SUDO docker ps -a --filter "name=iam-apiserver" || true
              echo "Checking container logs..."
              $SUDO docker logs --tail 2000 iam-apiserver || true
              exit 1
            fi

            # Ê∏ÖÁêÜÊóßÂ§á‰ªΩÔºà‰øùÁïô 10 ‰∏™Ôºâ
            echo "Cleaning up old backups..."
            $SUDO bash -c 'ls -t '"$BACKUP_DIR"'/backup_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r rm -f 2>/dev/null || true'

            echo "=========================================="
            echo "‚úÖ Deployment completed successfully"
            echo "=========================================="

      # ---- Á¨¨‰∫å‰∏™ SSH Ê≠•ÔºöÈÉ®ÁΩ≤ÂêéÈ™åËØÅÔºàÂêåÊ†∑ÂÖºÂÆπÈúÄË¶Å sudo ÂØÜÁ†ÅÁöÑÁéØÂ¢ÉÔºâ----
      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        env:
          SUDO_PASSWORD: ${{ secrets.SVRA_SUDO_PASSWORD }}
        with:
          host: ${{ secrets.SVRA_HOST }}
          username: ${{ secrets.SVRA_USERNAME }}
          key: ${{ secrets.SVRA_SSH_KEY }}
          port: ${{ secrets.SVRA_SSH_PORT || 22 }}
          envs: SUDO_PASSWORD
          script: |
            set -Eeuo pipefail

            if sudo -n true 2>/dev/null; then
              SUDO="sudo"
            else
              if [ -z "${SUDO_PASSWORD:-}" ]; then
                echo "‚ùå sudo needs password. Provide SVRA_SUDO_PASSWORD or configure NOPASSWD." >&2
                exit 1
              fi
              sudo_pw() { sudo -S "$@" <<<"$SUDO_PASSWORD"; }
              export -f sudo_pw
              SUDO="sudo_pw"
              $SUDO -v || true
            fi

            echo "Verifying deployment..."

            # Check service status
            if $SUDO docker ps --filter "name=iam-apiserver" --format '{{.Names}}' | grep -w iam-apiserver > /dev/null 2>&1; then
              echo "‚úÖ Docker container is running"
            else
              echo "‚ùå Docker container is not running"
              $SUDO docker ps -a --filter "name=iam-apiserver" || true
              exit 1
            fi

            # Check API response
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz || echo "000")
            if [ "$RESPONSE" = "200" ]; then
              echo "‚úÖ API is responding correctly"
            else
              echo "‚ùå API returned status: $RESPONSE"
              exit 1
            fi

            # Check version
            echo "Deployed version:"
            $SUDO docker exec iam-apiserver /app/apiserver version || echo "Version check skipped"

            echo "‚úÖ Deployment verification passed"

  notify:
    name: Send Notification
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Log deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment to production succeeded"
          else
            echo "‚ùå Deployment to production failed"
            exit 1
          fi

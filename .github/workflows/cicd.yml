name: CI/CD Pipeline

# 必需的 Secrets 配置 (在 GitHub 仓库设置中配置)
# Settings → Secrets and variables → Actions
# 
# Organization 级别 Secrets:
#   - SVRA_HOST, SVRA_USERNAME, SVRA_SSH_KEY, SVRA_SSH_PORT
#   - MYSQL_HOST, MYSQL_PORT, REDIS_HOST, REDIS_PORT
#
# Repository 级别 Secrets:
#   - MYSQL_USERNAME, MYSQL_PASSWORD, MYSQL_DBNAME
#   - REDIS_PASSWORD, REDIS_DB
#
# validate-secrets job 会在运行时验证这些 Secrets 是否存在

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: fangcunmount/iam-contracts  # 必须小写，Docker 不支持大写字母

jobs:
  validate-secrets:
    name: Validate Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Check Required Secrets
        env:
          SVRA_HOST: ${{ secrets.SVRA_HOST }}
          SVRA_USERNAME: ${{ secrets.SVRA_USERNAME }}
          SVRA_SSH_KEY: ${{ secrets.SVRA_SSH_KEY }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DBNAME: ${{ secrets.MYSQL_DBNAME }}
        run: |
          echo "🔍 Validating required secrets..."
          
          # 初始化验证状态
          VALIDATION_FAILED=0
          
          # 检查部署相关的 secrets(仅在 main 分支需要)
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "📋 Checking deployment secrets for main branch..."
            
            # 服务器连接
            if [ -z "$SVRA_HOST" ]; then
              echo "❌ SVRA_HOST is not set"
              VALIDATION_FAILED=1
            else
              echo "✅ SVRA_HOST is set"
            fi
            
            if [ -z "$SVRA_USERNAME" ]; then
              echo "❌ SVRA_USERNAME is not set"
              VALIDATION_FAILED=1
            else
              echo "✅ SVRA_USERNAME is set"
            fi
            
            if [ -z "$SVRA_SSH_KEY" ]; then
              echo "❌ SVRA_SSH_KEY is not set"
              VALIDATION_FAILED=1
            else
              echo "✅ SVRA_SSH_KEY is set"
            fi
            
            # 数据库连接(应用运行时必需)
            if [ -z "$MYSQL_HOST" ]; then
              echo "❌ MYSQL_HOST is not set"
              VALIDATION_FAILED=1
            else
              echo "✅ MYSQL_HOST is set"
            fi
            
            if [ -z "$MYSQL_USERNAME" ]; then
              echo "❌ MYSQL_USERNAME is not set"
              VALIDATION_FAILED=1
            else
              echo "✅ MYSQL_USERNAME is set"
            fi
            
            if [ -z "$MYSQL_PASSWORD" ]; then
              echo "❌ MYSQL_PASSWORD is not set"
              VALIDATION_FAILED=1
            else
              echo "✅ MYSQL_PASSWORD is set"
            fi
            
            if [ -z "$MYSQL_DBNAME" ]; then
              echo "❌ MYSQL_DBNAME is not set"
              VALIDATION_FAILED=1
            else
              echo "✅ MYSQL_DBNAME is set"
            fi
          else
            echo "ℹ️ Skipping deployment secrets check (not on main branch)"
          fi
          
          # 检查结果
          echo ""
          if [ $VALIDATION_FAILED -eq 1 ]; then
            echo "⚠️ Secrets validation failed! Please configure missing secrets."
            echo "ℹ️ Continuing anyway for non-deployment jobs..."
            # 不再 exit 1,允许后续 job 继续运行
          else
            echo "✅ All required secrets are configured!"
          fi

  test:
    name: Run Tests
    needs: [validate-secrets]
    if: always()  # 即使 validate-secrets 失败也继续运行
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: |
          go mod download
          go mod verify
          
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          
      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.6  # 与本地版本一致
          args: --timeout=5m

  build:
    name: Build Application
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: always()  # 即使 test/lint 失败也继续构建
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Build
        run: |
          make build
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: iam-apiserver
          path: bin/apiserver
          retention-days: 7

  docker:
    name: Build Docker Image
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build Docker image
        run: |
          make docker-build
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: fangcunmount
          DOCKER_TAG: latest
      
      - name: Push Docker image
        run: |
          make docker-push
        env:
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_REPOSITORY: fangcunmount

  deploy:
    name: Deploy to Production
    needs: [build, docker]  # 等待 Docker 镜像构建完成后再部署
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://iam.example.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: iam-apiserver
          path: ./artifacts
      
      - name: Prepare deployment files
        run: |
          # artifact 文件名是 apiserver,需要重命名为 iam-apiserver
          mv ./artifacts/apiserver ./artifacts/iam-apiserver
          chmod +x ./artifacts/iam-apiserver
          mkdir -p deploy-package
          cp ./artifacts/iam-apiserver deploy-package/
          cp -r configs deploy-package/
          tar -czf deploy-package.tar.gz -C deploy-package .
          
      - name: Upload deployment package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SVRA_HOST }}
          username: ${{ secrets.SVRA_USERNAME }}
          key: ${{ secrets.SVRA_SSH_KEY }}
          port: ${{ secrets.SVRA_SSH_PORT || 22 }}
          source: "deploy-package.tar.gz"
          target: "/tmp"
        
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SVRA_HOST }}
          username: ${{ secrets.SVRA_USERNAME }}
          key: ${{ secrets.SVRA_SSH_KEY }}
          port: ${{ secrets.SVRA_SSH_PORT || 22 }}
          script: |
            set -e
            
            echo "=========================================="
            echo "Starting deployment to Production Server (SVRA)"
            echo "=========================================="
            
            # Create directory structure
            sudo mkdir -p /opt/iam/configs
            sudo mkdir -p /opt/iam/configs/env
            sudo mkdir -p /var/log/iam-contracts
            
            # Backup current version
            echo "Creating backup..."
            BACKUP_DIR="/opt/backups/iam/deployments"
            sudo mkdir -p $BACKUP_DIR
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            if [ -d "/opt/iam/configs" ] && [ "$(ls -A /opt/iam/configs 2>/dev/null)" != "" ]; then
              sudo tar -czf $BACKUP_DIR/backup_${TIMESTAMP}.tar.gz \
                /opt/iam/configs /var/log/iam-contracts \
                2>/dev/null || echo "No previous version to backup"
            else
              echo "No previous version to backup"
            fi
            
            # Extract new version
            echo "Extracting new deployment package..."
            # 创建临时工作目录,避免在 /tmp 根目录解压的权限问题
            DEPLOY_TMP="/tmp/iam-deploy-$$"
            mkdir -p $DEPLOY_TMP
            cd $DEPLOY_TMP
            tar -xzf /tmp/deploy-package.tar.gz
            sudo cp -r configs/* /opt/iam/configs/
            sudo chown -R 1000:1000 /opt/iam/configs
            
            LOG_DIR_HOST="/data/logs/iam"
            sudo mkdir -p $LOG_DIR_HOST
            sudo chown -R 1000:1000 $LOG_DIR_HOST
            
            # 创建环境变量文件(从 GitHub Secrets 生成实际值)
            echo "Creating environment configuration..."
            sudo tee /opt/iam/configs/env/config.prod.env > /dev/null <<EOF
            # Auto-generated production environment configuration
            IAM_APISERVER_MYSQL_HOST=${{ secrets.MYSQL_HOST }}:${{ secrets.MYSQL_PORT || 3306 }}
            IAM_APISERVER_MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
            IAM_APISERVER_MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            IAM_APISERVER_MYSQL_DATABASE=${{ secrets.MYSQL_DBNAME }}
            IAM_APISERVER_REDIS_HOST=${{ secrets.REDIS_HOST }}
            IAM_APISERVER_REDIS_PORT=${{ secrets.REDIS_PORT || 6379 }}
            IAM_APISERVER_REDIS_ADDR=${{ secrets.REDIS_HOST }}:${{ secrets.REDIS_PORT || 6379 }}
            IAM_APISERVER_REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            IAM_APISERVER_REDIS_DB=${{ secrets.REDIS_DB || 1 }}
            IAM_APISERVER_JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF
            sudo chmod 600 /opt/iam/configs/env/config.prod.env
            sudo chown 1000:1000 /opt/iam/configs/env/config.prod.env

            # 清理旧的 systemd 部署（如果存在）
            echo "Cleaning up legacy systemd service..."
            if sudo systemctl list-unit-files 2>/dev/null | grep -q '^iam-apiserver.service'; then
              sudo systemctl stop iam-apiserver 2>/dev/null || true
              sudo systemctl disable iam-apiserver 2>/dev/null || true
              sudo rm -f /etc/systemd/system/iam-apiserver.service
              sudo systemctl daemon-reload
            fi
            
            # 清理临时目录
            cd /tmp
            rm -rf $DEPLOY_TMP
            rm -f deploy-package.tar.gz

            # 确保专用 Docker 网络存在
            if ! sudo docker network ls --format '{{.Name}}' | grep -w iam-network > /dev/null 2>&1; then
              echo "Creating Docker network iam-network..."
              sudo docker network create iam-network
            fi

            CERT_DEST_PATH=$(sudo sed -n 's/^[[:space:]]*cert-file:[[:space:]]*\(.*\)$/\1/p' /opt/iam/configs/apiserver.yaml | head -n1 | tr -d '\"')
            KEY_DEST_PATH=$(sudo sed -n 's/^[[:space:]]*private-key-file:[[:space:]]*\(.*\)$/\1/p' /opt/iam/configs/apiserver.yaml | head -n1 | tr -d '\"')
            if [ -z "$CERT_DEST_PATH" ]; then
              CERT_DEST_PATH="/etc/iam-contracts/ssl/iam.yangshujie.com.crt"
            fi
            if [ -z "$KEY_DEST_PATH" ]; then
              KEY_DEST_PATH="/etc/iam-contracts/ssl/iam.yangshujie.com.key"
            fi
            CERT_FILENAME=$(basename "$CERT_DEST_PATH")
            KEY_FILENAME=$(basename "$KEY_DEST_PATH")
            CERT_HOST_PATH="/data/ssl/certs/$CERT_FILENAME"
            KEY_HOST_PATH="/data/ssl/private/$KEY_FILENAME"
            TLS_MOUNTS=""
            if [ -f "$CERT_HOST_PATH" ] && [ -f "$KEY_HOST_PATH" ]; then
              TLS_MOUNTS="-v $CERT_HOST_PATH:$CERT_DEST_PATH:ro -v $KEY_HOST_PATH:$KEY_DEST_PATH:ro"
            else
              echo "⚠️ TLS certificate or key not found under /data/ssl, HTTPS may fail"
            fi

            GHCR_USERNAME="${{ github.actor }}"
            GHCR_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            if [ -n "$GHCR_TOKEN" ]; then
              echo "Logging into GitHub Container Registry..."
              echo "$GHCR_TOKEN" | sudo docker login ${{ env.DOCKER_REGISTRY }} -u "$GHCR_USERNAME" --password-stdin >/dev/null
            else
              echo "⚠️ No GitHub token available, docker pull may fail"
            fi

            DOCKER_OPTIONS="--name iam-apiserver \
              --restart unless-stopped \
              --network iam-network \
              -p 8080:9080 \
              -p 9444:9444 \
              -v /opt/iam/configs:/app/configs \
              -v $LOG_DIR_HOST:/var/log/iam-contracts \
              --env-file /opt/iam/configs/env/config.prod.env"
            if [ -n "$TLS_MOUNTS" ]; then
              DOCKER_OPTIONS="$DOCKER_OPTIONS $TLS_MOUNTS"
            fi

            # Pull latest Docker image
            echo "Pulling latest Docker image..."
            sudo docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # 停止并移除旧容器
            if sudo docker ps -a --format '{{.Names}}' | grep -w iam-apiserver > /dev/null 2>&1; then
              echo "Stopping existing Docker container..."
              sudo docker stop iam-apiserver || true
              sudo docker rm iam-apiserver || true
            fi

            # 启动 Docker 容器
            echo "Starting IAM service with Docker..."
            sudo docker run -d $DOCKER_OPTIONS \
              ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              --config=/app/configs/apiserver.yaml

            # 等待服务就绪并执行健康检查
            echo "Waiting for service to be ready..."
            ATTEMPTS=0
            MAX_ATTEMPTS=30  # 30次 × 5秒 = 150秒 (2.5分钟)
            
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              if curl -sf http://localhost:8080/healthz > /dev/null 2>&1; then
                echo "✅ API health check passed (attempt $ATTEMPTS)"
                sudo docker ps --filter "name=iam-apiserver" --format "table {{.Names}}\t{{.Status}}"
                break
              fi
              
              ATTEMPTS=$((ATTEMPTS + 1))
              if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                echo "⏳ Health check attempt $ATTEMPTS/$MAX_ATTEMPTS failed, retrying in 5 seconds..."
                sleep 5
              fi
            done
            
            # 最终验证
            if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "❌ Service failed to start after $MAX_ATTEMPTS attempts"
              echo "Checking container status..."
              sudo docker ps -a --filter "name=iam-apiserver"
              echo "Checking container logs..."
              sudo docker logs --tail 100 iam-apiserver || true
              exit 1
            fi
            
            # Clean up old backups (keep last 10)
            echo "Cleaning up old backups..."
            sudo ls -t $BACKUP_DIR/backup_*.tar.gz 2>/dev/null | tail -n +11 | xargs -r sudo rm -f 2>/dev/null || true
            
            echo "=========================================="
            echo "✅ Deployment completed successfully"
            echo "=========================================="
            
      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SVRA_HOST }}
          username: ${{ secrets.SVRA_USERNAME }}
          key: ${{ secrets.SVRA_SSH_KEY }}
          port: ${{ secrets.SVRA_SSH_PORT || 22 }}
          script: |
            set -e
            echo "Verifying deployment..."
            
            # Check service status
            if sudo docker ps --filter "name=iam-apiserver" --format '{{.Names}}' | grep -w iam-apiserver > /dev/null 2>&1; then
              echo "✅ Docker container is running"
            else
              echo "❌ Docker container is not running"
              sudo docker ps -a --filter "name=iam-apiserver"
              exit 1
            fi
            
            # Check API response
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz)
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ API is responding correctly"
            else
              echo "❌ API returned status: $RESPONSE"
              exit 1
            fi
            
            # Check version
            echo "Deployed version:"
            sudo docker exec iam-apiserver /app/apiserver version || echo "Version check skipped"
            
            echo "✅ Deployment verification passed"

  notify:
    name: Send Notification
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Log deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment to production succeeded"
          else
            echo "❌ Deployment to production failed"
            exit 1
          fi

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Get dependencies
        run: |
          go mod download
          go mod verify
          
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          
      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build Application
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          
      - name: Build
        run: |
          make build
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: iam-apiserver
          path: _output/bin/iam-apiserver
          retention-days: 7

  docker:
    name: Build Docker Image
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    name: Deploy to Production
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://iam.example.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
          script: |
            set -e
            
            echo "=========================================="
            echo "Starting deployment to Production Server A"
            echo "=========================================="
            
            # Navigate to project directory
            cd /opt/iam-contracts
            
            # Backup current version
            echo "Creating backup..."
            BACKUP_DIR="/opt/backups/iam/deployments"
            mkdir -p $BACKUP_DIR
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            tar -czf $BACKUP_DIR/backup_${TIMESTAMP}.tar.gz \
                _output/bin/iam-apiserver \
                configs/apiserver.yaml 2>/dev/null || echo "No previous version to backup"
            
            # Pull latest code
            echo "Pulling latest code..."
            git fetch origin
            git checkout main
            git pull origin main
            
            # Pull latest Docker image
            echo "Pulling latest Docker image..."
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop service
            echo "Stopping IAM service..."
            sudo systemctl stop iam-apiserver || echo "Service not running"
            
            # Update binary (if not using Docker)
            echo "Building new binary..."
            make build
            
            # Run database migrations
            echo "Running database migrations..."
            make migrate || echo "Migration skipped"
            
            # Start service
            echo "Starting IAM service..."
            sudo systemctl start iam-apiserver
            
            # Wait for service to be ready
            echo "Waiting for service to be ready..."
            sleep 10
            
            # Health check
            echo "Performing health check..."
            if systemctl is-active --quiet iam-apiserver; then
              echo "✅ Service is running"
              systemctl status iam-apiserver --no-pager | head -10
              
              # API health check
              if curl -sf http://localhost:8080/healthz > /dev/null; then
                echo "✅ API health check passed"
              else
                echo "⚠️ API health check failed"
                exit 1
              fi
            else
              echo "❌ Service failed to start"
              echo "Checking logs..."
              sudo journalctl -u iam-apiserver -n 50 --no-pager
              exit 1
            fi
            
            # Clean up old backups (keep last 10)
            echo "Cleaning up old backups..."
            ls -t $BACKUP_DIR/backup_*.tar.gz | tail -n +11 | xargs rm -f 2>/dev/null || true
            
            echo "=========================================="
            echo "✅ Deployment completed successfully"
            echo "=========================================="
            
      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
          script: |
            echo "Verifying deployment..."
            
            # Check service status
            if systemctl is-active --quiet iam-apiserver; then
              echo "✅ Service is active"
            else
              echo "❌ Service is not active"
              exit 1
            fi
            
            # Check API response
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz)
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ API is responding correctly"
            else
              echo "❌ API returned status: $RESPONSE"
              exit 1
            fi
            
            # Check version
            echo "Deployed version:"
            /opt/iam-contracts/_output/bin/iam-apiserver version || echo "Version check skipped"
            
            echo "✅ Deployment verification passed"

  notify:
    name: Send Notification
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment to production succeeded"
          else
            echo "❌ Deployment to production failed"
            exit 1
          fi

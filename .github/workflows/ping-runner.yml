name: Ping Runner

# Required Secrets: PRODUCTION_HOST, PRODUCTION_USERNAME, PRODUCTION_SSH_KEY, PRODUCTION_SSH_PORT

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  ping-production:
    name: Check Production Server A
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: SSH Health Check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
          script: |
            echo "=== Production Server A Health Check ==="
            echo "Hostname: $(hostname)"
            echo "Uptime: $(uptime)"
            echo ""
            echo "Memory:"
            free -h | grep -E "Mem|Swap"
            echo ""
            echo "Disk:"
            df -h | grep -E "^/dev/"
            echo ""
            echo "CPU:"
            top -bn1 | grep "Cpu(s)"
            
      - name: Check IAM Docker Service
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
          script: |
            echo "=== IAM Docker Container Status ==="
            
            # Check if Docker is running
            if ! sudo docker info >/dev/null 2>&1; then
              echo "❌ Docker daemon is not running"
              exit 1
            fi
            
            # Check IAM container
            if sudo docker ps --filter "name=iam-apiserver" --format "{{.Names}}" | grep -q "iam-apiserver"; then
              echo "✅ IAM container is running"
              
              # Get container status
              CONTAINER_STATUS=$(sudo docker ps --filter "name=iam-apiserver" --format "{{.Status}}")
              CONTAINER_HEALTH=$(sudo docker inspect --format='{{.State.Health.Status}}' iam-apiserver 2>/dev/null || echo "no healthcheck")
              
              echo "Status: $CONTAINER_STATUS"
              echo "Health: $CONTAINER_HEALTH"
              
              # Show container details
              sudo docker ps --filter "name=iam-apiserver" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              
              # Warn if unhealthy
              if [ "$CONTAINER_HEALTH" = "unhealthy" ]; then
                echo "⚠️ Container is unhealthy"
                echo "Recent logs:"
                sudo docker logs --tail 20 iam-apiserver
              fi
              
              # Quick API health check
              echo ""
              echo "=== API Health Check ==="
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz 2>/dev/null || echo "000")
              if [ "$HTTP_CODE" = "200" ]; then
                echo "✅ API responding: $HTTP_CODE"
              else
                echo "⚠️ API status: $HTTP_CODE"
              fi
            else
              echo "❌ IAM container is not running"
              sudo docker ps -a --filter "name=iam-apiserver"
              exit 1
            fi

  ping-github:
    name: Check GitHub Runner
    runs-on: ubuntu-latest
    steps:
      - name: Runner Info
        run: |
          echo "=== GitHub Runner Info ==="
          echo "OS: ${{ runner.os }}"
          echo "Name: ${{ runner.name }}"
          echo "Arch: ${{ runner.arch }}"
          echo "✅ Runner OK"

  report:
    name: Status Report
    needs: [ping-production, ping-github]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report
        run: |
          echo "=== Status Report ==="
          echo "Production: ${{ needs.ping-production.result }}"
          echo "GitHub: ${{ needs.ping-github.result }}"
          
          if [ "${{ needs.ping-production.result }}" != "success" ]; then
            echo "⚠️ Production check failed!"
            exit 1
          fi
          
          echo "✅ All OK"

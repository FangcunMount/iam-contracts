package handler

import (
	"math"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"

	"github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/application/child"
	"github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/application/guardianship"
	childdomain "github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/domain/child"
	childport "github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/domain/child/port"
	guarddomain "github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/domain/guardianship"
	guardport "github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/domain/guardianship/port"
	requestdto "github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/interface/restful/request"
	responsedto "github.com/fangcun-mount/iam-contracts/internal/apiserver/modules/uc/interface/restful/response"
	"github.com/fangcun-mount/iam-contracts/internal/pkg/code"
	"github.com/fangcun-mount/iam-contracts/internal/pkg/meta"
	perrors "github.com/fangcun-mount/iam-contracts/pkg/errors"
)

// ChildHandler 儿童档案 REST 处理器
type ChildHandler struct {
	*BaseHandler
	registerSrv  childport.ChildRegister
	profileSrv   childport.ChildProfileEditor
	querySrv     childport.ChildQueryer
	guardManager guardport.GuardianshipManager
	guardQuery   guardport.GuardianshipQueryer
	// ...existing code...
}

// NewChildHandler 创建儿童档案处理器
func NewChildHandler(
	registerSrv childport.ChildRegister,
	profileSrv childport.ChildProfileEditor,
	querySrv childport.ChildQueryer,
	guardManager guardport.GuardianshipManager,
	guardQuery guardport.GuardianshipQueryer,
) *ChildHandler {
	return &ChildHandler{
		BaseHandler:  NewBaseHandler(),
		registerSrv:  registerSrv,
		profileSrv:   profileSrv,
		querySrv:     querySrv,
		guardManager: guardManager,
		guardQuery:   guardQuery,
	}
}

// ListMyChildren 获取当前用户的儿童档案列表
func (h *ChildHandler) ListMyChildren(c *gin.Context) {
	var query requestdto.ChildListQuery
	if err := h.BindQuery(c, &query); err != nil {
		h.Error(c, err)
		return
	}

	rawID, ok := h.GetUserID(c)
	if !ok {
		h.ErrorWithCode(c, code.ErrTokenInvalid, "user id not found in context")
		return
	}

	userID, err := parseUserID(rawID)
	if err != nil {
		h.Error(c, err)
		return
	}

	guardianships, err := h.guardQuery.FindListByUserID(c.Request.Context(), userID)
	if err != nil {
		h.Error(c, err)
		return
	}

	var children []responsedto.ChildResponse
	for _, g := range guardianships {
		if g == nil {
			continue
		}
		child, err := h.querySrv.FindByID(c.Request.Context(), g.Child)
		if err != nil {
			h.Error(c, err)
			return
		}
		resp := newChildResponse(child)
		children = append(children, resp)
	}

	total := len(children)
	sliced := sliceChildren(children, query.Offset, query.Limit)

	h.Success(c, responsedto.ChildPageResponse{
		Total:  total,
		Limit:  query.Limit,
		Offset: query.Offset,
		Items:  sliced,
	})
}

// RegisterChild 注册儿童并授予当前用户监护权
func (h *ChildHandler) RegisterChild(c *gin.Context) {
	var req requestdto.ChildRegisterRequest
	if err := h.BindJSON(c, &req); err != nil {
		h.Error(c, err)
		return
	}

	rawUserID, ok := h.GetUserID(c)
	if !ok {
		h.ErrorWithCode(c, code.ErrTokenInvalid, "user id not found in context")
		return
	}

	userID, err := parseUserID(rawUserID)
	if err != nil {
		h.Error(c, err)
		return
	}

	relation, err := parseRelation(req.Relation)
	if err != nil {
		h.Error(c, err)
		return
	}

	gender := meta.NewGender(uint8(*req.Gender))
	birthday := meta.NewBirthday(strings.TrimSpace(req.DOB))
	idCard := meta.NewIDCard(strings.TrimSpace(req.LegalName), strings.TrimSpace(req.IDNo))

	var heightPtr *meta.Height
	if req.HeightCm != nil {
		if *req.HeightCm < 0 {
			h.ErrorWithCode(c, code.ErrInvalidArgument, "heightCm must be >= 0")
			return
		}
		hh, herr := meta.NewHeightFromFloat(float64(*req.HeightCm))
		if herr != nil {
			h.Error(c, perrors.WithCode(code.ErrInvalidArgument, "%s", herr.Error()))
			return
		}
		heightPtr = &hh
	}

	var weightPtr *meta.Weight
	if strings.TrimSpace(req.WeightKg) != "" {
		f, werr := strconv.ParseFloat(strings.TrimSpace(req.WeightKg), 64)
		if werr != nil {
			h.ErrorWithCode(c, code.ErrInvalidArgument, "invalid weightKg: %v", werr)
			return
		}
		ww, werr := meta.NewWeightFromFloat(f)
		if werr != nil {
			h.Error(c, perrors.WithCode(code.ErrInvalidArgument, "%s", werr.Error()))
			return
		}
		weightPtr = &ww
	}

	// 1. 注册儿童
	registerDTO := childRegisterDTOFromRequest(req)
	childResult, err := h.registerSrv.Register(c.Request.Context(), registerDTO)
	if err != nil {
		h.Error(c, err)
		return
	}

	// 2. 添加监护人
	addGuardianDTO := guardianshipAddGuardianDTOFromRequest(req, userID, childResult.ID)
	err = h.guardManager.AddGuardian(c.Request.Context(), addGuardianDTO)
	if err != nil {
		h.Error(c, err)
		return
	}

	childResp := newChildResponseFromResult(childResult)
	childResp.IDType = req.IDType

	h.Created(c, responsedto.ChildRegisterResponse{
		Child:        childResp,
		Guardianship: nil, // 可选：可再查一次监护关系
	})

}

// DTO 构造辅助函数
func childRegisterDTOFromRequest(req requestdto.ChildRegisterRequest) child.RegisterChildDTO {
	var height *int
	if req.HeightCm != nil {
		h := int(*req.HeightCm)
		height = &h
	}
	var weight *int
	if strings.TrimSpace(req.WeightKg) != "" {
		f, _ := strconv.ParseFloat(strings.TrimSpace(req.WeightKg), 64)
		w := int(f * 1000)
		weight = &w
	}
	return child.RegisterChildDTO{
		Name:     strings.TrimSpace(req.LegalName),
		Gender:   uint8(*req.Gender),
		Birthday: strings.TrimSpace(req.DOB),
		IDCard:   strings.TrimSpace(req.IDNo),
		Height:   height,
		Weight:   weight,
	}
}

func guardianshipAddGuardianDTOFromRequest(req requestdto.ChildRegisterRequest, userID string, childID string) guardianship.AddGuardianDTO {
	return guardianship.AddGuardianDTO{
		UserID:   userID,
		ChildID:  childID,
		Relation: req.Relation,
	}
}

func newChildResponseFromResult(result *child.ChildResult) responsedto.ChildResponse {
	resp := responsedto.ChildResponse{
		ID:       result.ID,
		Name:     result.Name,
		Gender:   result.Gender,
		Birthday: result.Birthday,
		Height:   result.Height,
		Weight:   result.Weight,
		IDCard:   result.IDCard,
	}
	return resp
}

// CreateChild 仅创建儿童档案
func (h *ChildHandler) CreateChild(c *gin.Context) {
	var req requestdto.ChildCreateRequest
	if err := h.BindJSON(c, &req); err != nil {
		h.Error(c, err)
		return
	}

	child, err := h.createChildRecord(c, req)
	if err != nil {
		h.Error(c, err)
		return
	}

	resp := newChildResponse(child)
	resp.IDType = req.IDType

	h.Created(c, resp)
}

// GetChild 查询儿童档案
func (h *ChildHandler) GetChild(c *gin.Context) {
	childID, err := parseChildID(c.Param("childId"))
	if err != nil {
		h.Error(c, err)
		return
	}

	child, err := h.querySrv.FindByID(c.Request.Context(), childID)
	if err != nil {
		h.Error(c, err)
		return
	}

	h.Success(c, newChildResponse(child))
}

// PatchChild 更新儿童档案
func (h *ChildHandler) PatchChild(c *gin.Context) {
	childID, err := parseChildID(c.Param("childId"))
	if err != nil {
		h.Error(c, err)
		return
	}

	var req requestdto.ChildUpdateRequest
	if err := h.BindJSON(c, &req); err != nil {
		h.Error(c, err)
		return
	}

	ctx := c.Request.Context()
	current, err := h.querySrv.FindByID(ctx, childID)
	if err != nil {
		h.Error(c, err)
		return
	}

	if req.LegalName != nil {
		if err := h.profileSrv.Rename(ctx, childID, strings.TrimSpace(*req.LegalName)); err != nil {
			h.Error(c, err)
			return
		}
	}

	if req.Gender != nil || req.DOB != nil {
		gender := current.Gender
		if req.Gender != nil {
			gender = meta.NewGender(uint8(*req.Gender))
		}

		birthday := current.Birthday
		if req.DOB != nil {
			birthday = meta.NewBirthday(strings.TrimSpace(*req.DOB))
		}

		if err := h.profileSrv.UpdateProfile(ctx, childID, gender, birthday); err != nil {
			h.Error(c, err)
			return
		}
	}

	if req.HeightCm != nil || req.WeightKg != nil {
		height := current.Height
		if req.HeightCm != nil {
			if *req.HeightCm < 0 {
				h.ErrorWithCode(c, code.ErrInvalidArgument, "heightCm must be >= 0")
				return
			}
			hh, herr := meta.NewHeightFromFloat(float64(*req.HeightCm))
			if herr != nil {
				h.Error(c, perrors.WithCode(code.ErrInvalidArgument, "%s", herr.Error()))
				return
			}
			height = hh
		}

		weight := current.Weight
		if req.WeightKg != nil {
			value := strings.TrimSpace(*req.WeightKg)
			if value != "" {
				f, perr := strconv.ParseFloat(value, 64)
				if perr != nil {
					h.ErrorWithCode(c, code.ErrInvalidArgument, "invalid weightKg: %v", perr)
					return
				}
				ww, werr := meta.NewWeightFromFloat(f)
				if werr != nil {
					h.Error(c, perrors.WithCode(code.ErrInvalidArgument, "%s", werr.Error()))
					return
				}
				weight = ww
			}
		}

		if err := h.profileSrv.UpdateHeightWeight(ctx, childID, height, weight); err != nil {
			h.Error(c, err)
			return
		}
	}

	child, err := h.querySrv.FindByID(ctx, childID)
	if err != nil {
		h.Error(c, err)
		return
	}

	h.Success(c, newChildResponse(child))
}

// SearchChildren 搜索儿童档案
func (h *ChildHandler) SearchChildren(c *gin.Context) {
	var req requestdto.ChildSearchQuery
	if err := h.BindQuery(c, &req); err != nil {
		h.Error(c, err)
		return
	}

	var (
		children []*childdomain.Child
		err      error
	)

	if req.DOB != nil && strings.TrimSpace(*req.DOB) != "" {
		children, err = h.querySrv.FindListByNameAndBirthday(c.Request.Context(), req.Name, meta.NewBirthday(strings.TrimSpace(*req.DOB)))
	} else {
		children, err = h.querySrv.FindListByName(c.Request.Context(), req.Name)
	}

	if err != nil {
		h.Error(c, err)
		return
	}

	items := make([]responsedto.ChildResponse, 0, len(children))
	for _, child := range children {
		if child == nil {
			continue
		}
		items = append(items, newChildResponse(child))
	}

	total := len(items)
	sliced := sliceChildren(items, req.Offset, req.Limit)

	h.Success(c, responsedto.ChildPageResponse{
		Total:  total,
		Limit:  req.Limit,
		Offset: req.Offset,
		Items:  sliced,
	})
}

func (h *ChildHandler) createChildRecord(c *gin.Context, req requestdto.ChildCreateRequest) (*childdomain.Child, error) {
	if req.Gender == nil {
		return nil, perrors.WithCode(code.ErrInvalidArgument, "gender is required")
	}

	gender := meta.NewGender(uint8(*req.Gender))
	birthday := meta.NewBirthday(strings.TrimSpace(req.DOB))

	ctx := c.Request.Context()

	child, err := h.registerSrv.Register(ctx, strings.TrimSpace(req.LegalName), gender, birthday)
	if err != nil {
		return nil, err
	}

	if err := h.profileSrv.UpdateIDCard(ctx, child.ID, meta.NewIDCard(req.LegalName, strings.TrimSpace(req.IDNo))); err != nil {
		return nil, err
	}

	height := child.Height
	heightUpdated := false
	if req.HeightCm != nil {
		if *req.HeightCm < 0 {
			return nil, perrors.WithCode(code.ErrInvalidArgument, "heightCm must be >= 0")
		}
		hh, herr := meta.NewHeightFromFloat(float64(*req.HeightCm))
		if herr != nil {
			return nil, perrors.WithCode(code.ErrInvalidArgument, "%s", herr.Error())
		}
		height = hh
		heightUpdated = true
	}

	weight := child.Weight
	weightUpdated := false
	if strings.TrimSpace(req.WeightKg) != "" {
		f, werr := strconv.ParseFloat(strings.TrimSpace(req.WeightKg), 64)
		if werr != nil {
			return nil, perrors.WithCode(code.ErrInvalidArgument, "invalid weightKg: %v", werr)
		}
		ww, werr := meta.NewWeightFromFloat(f)
		if werr != nil {
			return nil, perrors.WithCode(code.ErrInvalidArgument, "%s", werr.Error())
		}
		weight = ww
		weightUpdated = true
	}

	if heightUpdated || weightUpdated {
		if err := h.profileSrv.UpdateHeightWeight(ctx, child.ID, height, weight); err != nil {
			return nil, err
		}
	}

	return h.querySrv.FindByID(ctx, child.ID)
}

func parseChildID(raw string) (childdomain.ChildID, error) {
	raw = strings.TrimSpace(raw)
	if raw == "" {
		return childdomain.ChildID{}, perrors.WithCode(code.ErrInvalidArgument, "child id cannot be empty")
	}

	id, err := strconv.ParseUint(raw, 10, 64)
	if err != nil {
		return childdomain.ChildID{}, perrors.WithCode(code.ErrInvalidArgument, "invalid child id: %s", raw)
	}

	return childdomain.NewChildID(id), nil
}

func newChildResponse(child *childdomain.Child) responsedto.ChildResponse {
	if child == nil {
		return responsedto.ChildResponse{}
	}

	resp := responsedto.ChildResponse{
		ID:        child.ID.String(),
		LegalName: child.Name,
		DOB:       child.Birthday.String(),
		IDMasked:  maskID(child.IDCard.String()),
	}

	if v := int(child.Gender.Value()); v != 0 {
		gender := v
		resp.Gender = &gender
	}

	if child.Height.Tenths() > 0 {
		height := int(math.Round(child.Height.Float()))
		resp.HeightCm = &height
	}

	if child.Weight.Tenths() > 0 {
		weight := child.Weight.String()
		resp.WeightKg = &weight
	}

	return resp
}

func sliceChildren(children []responsedto.ChildResponse, offset, limit int) []responsedto.ChildResponse {
	if limit <= 0 {
		limit = 20
	}
	if offset < 0 {
		offset = 0
	}
	if offset >= len(children) {
		return []responsedto.ChildResponse{}
	}

	end := offset + limit
	if end > len(children) {
		end = len(children)
	}

	return children[offset:end]
}

func parseRelation(raw string) (guarddomain.Relation, error) {
	switch strings.ToLower(strings.TrimSpace(raw)) {
	case "self":
		return guarddomain.RelSelf, nil
	case "parent":
		return guarddomain.RelParent, nil
	case "guardian":
		return guarddomain.RelOther, nil
	default:
		return "", perrors.WithCode(code.ErrInvalidArgument, "unsupported relation: %s", raw)
	}
}

func newGuardianshipResponse(g *guarddomain.Guardianship) responsedto.GuardianshipResponse {
	if g == nil {
		return responsedto.GuardianshipResponse{}
	}

	resp := responsedto.GuardianshipResponse{
		ID:       g.ID,
		UserID:   g.User.String(),
		ChildID:  g.Child.String(),
		Relation: relationToString(g.Rel),
		Since:    g.EstablishedAt,
	}
	if g.RevokedAt != nil {
		resp.RevokedAt = g.RevokedAt
	}

	return resp
}

func relationToString(rel guarddomain.Relation) string {
	switch rel {
	case guarddomain.RelSelf:
		return "self"
	case guarddomain.RelParent:
		return "parent"
	default:
		return "guardian"
	}
}

func maskID(id string) string {
	id = strings.TrimSpace(id)
	if len(id) <= 4 {
		return id
	}
	return id[:2] + strings.Repeat("*", len(id)-4) + id[len(id)-2:]
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: iam/identity/v1/identity.proto

package identityv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IdentityRead_GetUser_FullMethodName  = "/iam.identity.v1.IdentityRead/GetUser"
	IdentityRead_GetChild_FullMethodName = "/iam.identity.v1.IdentityRead/GetChild"
)

// IdentityReadClient is the client API for IdentityRead service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityReadClient interface {
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	GetChild(ctx context.Context, in *GetChildReq, opts ...grpc.CallOption) (*GetChildResp, error)
}

type identityReadClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityReadClient(cc grpc.ClientConnInterface) IdentityReadClient {
	return &identityReadClient{cc}
}

func (c *identityReadClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, IdentityRead_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityReadClient) GetChild(ctx context.Context, in *GetChildReq, opts ...grpc.CallOption) (*GetChildResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChildResp)
	err := c.cc.Invoke(ctx, IdentityRead_GetChild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityReadServer is the server API for IdentityRead service.
// All implementations must embed UnimplementedIdentityReadServer
// for forward compatibility.
type IdentityReadServer interface {
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	GetChild(context.Context, *GetChildReq) (*GetChildResp, error)
	mustEmbedUnimplementedIdentityReadServer()
}

// UnimplementedIdentityReadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentityReadServer struct{}

func (UnimplementedIdentityReadServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIdentityReadServer) GetChild(context.Context, *GetChildReq) (*GetChildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChild not implemented")
}
func (UnimplementedIdentityReadServer) mustEmbedUnimplementedIdentityReadServer() {}
func (UnimplementedIdentityReadServer) testEmbeddedByValue()                      {}

// UnsafeIdentityReadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityReadServer will
// result in compilation errors.
type UnsafeIdentityReadServer interface {
	mustEmbedUnimplementedIdentityReadServer()
}

func RegisterIdentityReadServer(s grpc.ServiceRegistrar, srv IdentityReadServer) {
	// If the following call pancis, it indicates UnimplementedIdentityReadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IdentityRead_ServiceDesc, srv)
}

func _IdentityRead_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityReadServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityRead_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityReadServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityRead_GetChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityReadServer).GetChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityRead_GetChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityReadServer).GetChild(ctx, req.(*GetChildReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityRead_ServiceDesc is the grpc.ServiceDesc for IdentityRead service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityRead_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iam.identity.v1.IdentityRead",
	HandlerType: (*IdentityReadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _IdentityRead_GetUser_Handler,
		},
		{
			MethodName: "GetChild",
			Handler:    _IdentityRead_GetChild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/identity/v1/identity.proto",
}

const (
	GuardianshipQuery_IsGuardian_FullMethodName   = "/iam.identity.v1.GuardianshipQuery/IsGuardian"
	GuardianshipQuery_ListChildren_FullMethodName = "/iam.identity.v1.GuardianshipQuery/ListChildren"
)

// GuardianshipQueryClient is the client API for GuardianshipQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuardianshipQueryClient interface {
	IsGuardian(ctx context.Context, in *IsGuardianReq, opts ...grpc.CallOption) (*IsGuardianResp, error)
	ListChildren(ctx context.Context, in *ListChildrenReq, opts ...grpc.CallOption) (*ListChildrenResp, error)
}

type guardianshipQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewGuardianshipQueryClient(cc grpc.ClientConnInterface) GuardianshipQueryClient {
	return &guardianshipQueryClient{cc}
}

func (c *guardianshipQueryClient) IsGuardian(ctx context.Context, in *IsGuardianReq, opts ...grpc.CallOption) (*IsGuardianResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsGuardianResp)
	err := c.cc.Invoke(ctx, GuardianshipQuery_IsGuardian_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardianshipQueryClient) ListChildren(ctx context.Context, in *ListChildrenReq, opts ...grpc.CallOption) (*ListChildrenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChildrenResp)
	err := c.cc.Invoke(ctx, GuardianshipQuery_ListChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuardianshipQueryServer is the server API for GuardianshipQuery service.
// All implementations must embed UnimplementedGuardianshipQueryServer
// for forward compatibility.
type GuardianshipQueryServer interface {
	IsGuardian(context.Context, *IsGuardianReq) (*IsGuardianResp, error)
	ListChildren(context.Context, *ListChildrenReq) (*ListChildrenResp, error)
	mustEmbedUnimplementedGuardianshipQueryServer()
}

// UnimplementedGuardianshipQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGuardianshipQueryServer struct{}

func (UnimplementedGuardianshipQueryServer) IsGuardian(context.Context, *IsGuardianReq) (*IsGuardianResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGuardian not implemented")
}
func (UnimplementedGuardianshipQueryServer) ListChildren(context.Context, *ListChildrenReq) (*ListChildrenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChildren not implemented")
}
func (UnimplementedGuardianshipQueryServer) mustEmbedUnimplementedGuardianshipQueryServer() {}
func (UnimplementedGuardianshipQueryServer) testEmbeddedByValue()                           {}

// UnsafeGuardianshipQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuardianshipQueryServer will
// result in compilation errors.
type UnsafeGuardianshipQueryServer interface {
	mustEmbedUnimplementedGuardianshipQueryServer()
}

func RegisterGuardianshipQueryServer(s grpc.ServiceRegistrar, srv GuardianshipQueryServer) {
	// If the following call pancis, it indicates UnimplementedGuardianshipQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GuardianshipQuery_ServiceDesc, srv)
}

func _GuardianshipQuery_IsGuardian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGuardianReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardianshipQueryServer).IsGuardian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuardianshipQuery_IsGuardian_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardianshipQueryServer).IsGuardian(ctx, req.(*IsGuardianReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardianshipQuery_ListChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChildrenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardianshipQueryServer).ListChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuardianshipQuery_ListChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardianshipQueryServer).ListChildren(ctx, req.(*ListChildrenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GuardianshipQuery_ServiceDesc is the grpc.ServiceDesc for GuardianshipQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuardianshipQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iam.identity.v1.GuardianshipQuery",
	HandlerType: (*GuardianshipQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsGuardian",
			Handler:    _GuardianshipQuery_IsGuardian_Handler,
		},
		{
			MethodName: "ListChildren",
			Handler:    _GuardianshipQuery_ListChildren_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/identity/v1/identity.proto",
}
